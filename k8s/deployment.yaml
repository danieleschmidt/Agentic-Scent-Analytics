apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentic-scent-app
  namespace: agentic-scent
  labels:
    app.kubernetes.io/name: agentic-scent-analytics
    app.kubernetes.io/component: application
    app.kubernetes.io/version: "0.1.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: agentic-scent-analytics
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: agentic-scent-analytics
        app.kubernetes.io/component: application
        app.kubernetes.io/version: "0.1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: agentic-scent-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: agentic-scent
        image: agentic-scent:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8090
          protocol: TCP
        env:
        - name: AGENTIC_SCENT_SITE_ID
          value: "k8s-cluster"
        envFrom:
        - configMapRef:
            name: agentic-scent-config
        - secretRef:
            name: agentic-scent-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: agentic-scent-data-pvc
      - name: logs-volume
        emptyDir: {}
      - name: config-volume
        configMap:
          name: agentic-scent-app-config
          optional: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - agentic-scent-analytics
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agentic-scent-sa
  namespace: agentic-scent
  labels:
    app.kubernetes.io/name: agentic-scent-analytics

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: agentic-scent-data-pvc
  namespace: agentic-scent
  labels:
    app.kubernetes.io/name: agentic-scent-analytics
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd  # Adjust based on your cluster
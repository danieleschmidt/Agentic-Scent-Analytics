version: '3.8'

services:
  # Sentiment Analyzer API
  sentiment-api:
    build:
      context: .
      dockerfile: sentiment_analyzer/Dockerfile
      target: production
    container_name: sentiment-analyzer-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - ENABLE_REDIS_CACHE=true
      - L1_CACHE_SIZE=2000
      - L2_CACHE_TTL=7200
      - TASK_PROCESSOR_WORKERS=8
      - TRANSFORMERS_ENABLED=true
      - VADER_ENABLED=true
      - TEXTBLOB_ENABLED=true
      - INCLUDE_EMOTIONS=false
      - TIMEOUT_SECONDS=60
      - MAX_RETRIES=3
    depends_on:
      - redis
      - postgres
    volumes:
      - sentiment_logs:/var/log/sentiment-analyzer
      - ./sentiment_analyzer/models:/app/models  # Model cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sentiment-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sentiment-api.rule=Host(`sentiment-api.local`)"
      - "traefik.http.routers.sentiment-api.entrypoints=web"

  # Load Balancer/Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sentiment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/sentiment.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - sentiment_logs:/var/log/nginx
    depends_on:
      - sentiment-api
    restart: unless-stopped
    networks:
      - sentiment-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`sentiment.local`)"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sentiment-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sentiment-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sentiment-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sentiment_analyzer
      - POSTGRES_USER=sentiment_user
      - POSTGRES_PASSWORD=sentiment_secure_password_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentiment_user -d sentiment_analyzer"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sentiment-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sentiment-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sentiment-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: sentiment-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sentiment_admin_2024
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - sentiment-network

  # Log Management - ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sentiment-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - sentiment-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Background Task Worker
  sentiment-worker:
    build:
      context: .
      dockerfile: sentiment_analyzer/Dockerfile
      target: worker
    container_name: sentiment-worker
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - TASK_PROCESSOR_WORKERS=4
      - WORKER_MODE=true
    depends_on:
      - redis
      - postgres
    volumes:
      - sentiment_logs:/var/log/sentiment-analyzer
      - ./sentiment_analyzer/models:/app/models
    restart: unless-stopped
    networks:
      - sentiment-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  sentiment_logs:
    driver: local

networks:
  sentiment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16